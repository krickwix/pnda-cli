# pnda_cluster.yaml defines the instances to create for this flavor of PNDA
# The resource_registry.yaml file defines which yaml template to apply to
# each instance type, and these specific yaml files configure the
# instance as required for that type of node.

heat_template_version: 2015-04-30

parameters:
  mgr1Flavor:
    type: string
  edgeFlavor:
    type: string
  gatewayFlavor:
    type: string
  kafkaFlavor:
    type: string
  datanodeFlavor:
    type: string
  imageId:
    type: string
  dataNodes:
    type: number
  kafkaNodes:
    type: number
  logVolumeSize:
    type: number
  datanodeVolumeSize:
    type: number
  externalPublicNetworkId:
    type: string
  publicNetworkId:
    type: string
  publicSubnetId:
    type: string
  keyName:
    type: string
  pndaSecurityGroupPnda:
    type: string
  stackName:
    type: string

resources:
  gateway:
    type: OS::Pnda::gateway
    properties:
      flavor: { get_param: gatewayFlavor }
      imageId: { get_param: imageId }
      keyName: { get_param: keyName }
      stackName: { get_param: stackName }
      instanceName:
        str_replace:
          template: '%stackname%-gateway'
          params:
            '%stackname%': { get_param: stackName  }
      publicNetworkId: { get_param: publicNetworkId }
      publicSubnetId: { get_param: publicSubnetId }
      externalPublicNetworkId: { get_param: externalPublicNetworkId }
      pndaSecurityGroupPnda: { get_param: pndaSecurityGroupPnda }
      logVolumeSize : { get_param: logVolumeSize }

  dn:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: dataNodes }
      resource_def:
        type: OS::Pnda::dn
        properties:
          flavor: { get_param: datanodeFlavor }
          imageId: { get_param: imageId }
          keyName: { get_param: keyName }
          stackName: { get_param: stackName }
          instanceName:
            str_replace:
              template: '%stackname%-hadoop-dn-%index%'
              params:
                '%stackname%': { get_param: stackName  }
          nodeIndex: '%index%'
          publicNetworkId: { get_param: publicNetworkId }
          publicSubnetId: { get_param: publicSubnetId }
          pndaSecurityGroupPnda: { get_param: pndaSecurityGroupPnda }
          datanodeVolumeSize: { get_param: datanodeVolumeSize }
          logVolumeSize : { get_param: logVolumeSize }

  kafka:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: kafkaNodes }
      resource_def:
        type: OS::Pnda::kafka
        properties:
          flavor: { get_param: kafkaFlavor }
          imageId: { get_param: imageId }
          keyName: { get_param: keyName }
          stackName: { get_param: stackName }
          instanceName:
            str_replace:
              template: '%stackname%-kafka-%index%'
              params:
                '%stackname%': { get_param: stackName  }
          nodeIndex: '%index%'
          publicNetworkId: { get_param: publicNetworkId }
          publicSubnetId: { get_param: publicSubnetId }
          pndaSecurityGroupPnda: { get_param: pndaSecurityGroupPnda }
          logVolumeSize : { get_param: logVolumeSize }

  manager1:
    type: OS::Pnda::manager1
    properties:
      flavor: { get_param: mgr1Flavor }
      imageId: { get_param: imageId }
      keyName: { get_param: keyName }
      stackName: { get_param: stackName }
      instanceName:
        str_replace:
          template: '%stackname%-hadoop-mgr-1'
          params:
            '%stackname%': { get_param: stackName  }
      publicNetworkId: { get_param: publicNetworkId }
      publicSubnetId: { get_param: publicSubnetId }
      pndaSecurityGroupPnda: { get_param: pndaSecurityGroupPnda }
      logVolumeSize : { get_param: logVolumeSize }

  edge:
    type: OS::Pnda::edge
    properties:
      flavor: { get_param: edgeFlavor }
      imageId: { get_param: imageId }
      keyName: { get_param: keyName }
      stackName: { get_param: stackName }
      publicNetworkId: { get_param: publicNetworkId }
      publicSubnetId: { get_param: publicSubnetId }
      pndaSecurityGroupPnda: { get_param: pndaSecurityGroupPnda }
      logVolumeSize : { get_param: logVolumeSize }
      instanceName:
        str_replace:
          template: '%stackname%-hadoop-edge'
          params:
            '%stackname%': { get_param: stackName  }
