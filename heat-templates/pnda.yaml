# This base pnda.yaml contains the parts of the stack that are common to all flavors
# The <flavor>/pnda.yaml file is merged over the top of this one before creating the stack

heat_template_version: 2015-04-30

parameters:
  pnda_router:
    type: string
    default: '15fc200f-484b-4d2e-bd5d-a7d26b7a4ea4'
  privateSubnetCidr:
    type: string
    description: Private network address (CIDR notation)
  privateSubnetGateway:
    type: string
    description: Private network gateway address
  publicProducerSubnetCidr:
    type: string
    description: Ingest network address (CIDR notation)
  publicProducerSubnetGateway:
    type: string
    description: Ingest network gateway address
  PUBLIC_NETWORK_ID:
    type: string
    description: >
      ID or name of public network for which floating IP addresses will be allocated
  whitelistSshAccess:
    type: string
    description: >
      CIDR specifying the address range that may access the created PNDA instances (CIDR notation)
  DeploymentID:
    type: string
    default: ''
    description: |
      DeploymentID for this deployment. To trigger a scaling, the stack shall be updated using a different value passed as a parameter.
      Otherwise, orchestration steps necessary to properly the scale the clusters will not be executed.
  IMAGE_ID:
    type: string
    description: default image for pnda servers
  KeyName:
    description: Name of an existing KeyPair to enable SSH access to the instances
    type: string
  dns_nameservers:
    description: A specified  DNS name servers to be used.
    type: comma_delimited_list

resources:
  # Create pnda private net and subnet. All pnda-cluster nodes will be part of this network
  pnda_private_network:
    type: OS::Neutron::Net
    properties:
      name:
        str_replace:
          template: '%stackname%_private_network'
          params:
            '%stackname%': { get_param: 'OS::stack_name' }
  pnda_private_subnet:
    type: OS::Neutron::Subnet
    depends_on: pnda_private_network
    properties:
      network_id: { get_resource: pnda_private_network }
      cidr: { get_param: privateSubnetCidr }
      gateway_ip: { get_param: privateSubnetGateway }
      dns_nameservers: { get_param: dns_nameservers }

  # Create Kafka ingest net and subnet. All kafka nodes will be part of this network
  pnda_ingest_network:
    type: OS::Neutron::Net
    properties:
      name:
        str_replace:
          template: '%stackname%_ingest_network'
          params:
            '%stackname%': { get_param: 'OS::stack_name' }

  pnda_ingest_subnet:
    type: OS::Neutron::Subnet
    depends_on: pnda_private_network
    properties:
      network_id: { get_resource: pnda_ingest_network }
      cidr: { get_param: publicProducerSubnetCidr }
      gateway_ip: { get_param: publicProducerSubnetGateway }

  # create a software router
  #pnda_router:
  #  type: OS::Neutron::Router
  #  properties:
  #    name:
  #      str_replace:
  #        template: '%stackname%_pnda_router'
  #        params:
  #          '%stackname%': { get_param: 'OS::stack_name' }
  #    external_gateway_info:
  #      network: { get_param: PUBLIC_NETWORK_ID }

  # Attach pnda_private_subnet as an interface to the pnda_router
  private_network_router_interface:
    type: OS::Neutron::RouterInterface
    depends_on: [ pnda_private_subnet ]
    properties:
      #router_id: { get_resource: pnda_router }
      router_id: { get_param: pnda_router }
      subnet_id: { get_resource: pnda_private_subnet }

  # Attach pnda_ingest_subnet as an interface to the pnda_router
  ingest_network_router_interface:
    type: OS::Neutron::RouterInterface
    #depends_on: [ pnda_router, pnda_ingest_subnet ]
    depends_on: [ pnda_ingest_subnet ]
    properties:
      #router_id: { get_resource: pnda_router }
      router_id: { get_param: pnda_router }
      subnet_id: { get_resource: pnda_ingest_subnet }

  # Create security group for pnda
  pnda_security_group_pnda:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Add security group rules for pnda deployment
      name:
        str_replace:
          template: '%stackname%_security_group_pnda'
          params:
            '%stackname%': { get_param: 'OS::stack_name' }
      rules:
        - protocol: tcp
          port_range_min: 22
          port_range_max: 22
          remote_ip_prefix: { get_param: whitelistSshAccess }

        - protocol: udp
          port_range_min: 123
          port_range_max: 123
          remote_ip_prefix: { get_param: whitelistSshAccess }

        - protocol: udp
          port_range_min: 53
          port_range_max: 53
          remote_mode: remote_group_id

        - protocol: icmp
          remote_mode: remote_group_id

        - protocol: tcp
          port_range_min: 1
          port_range_max: 65535
          remote_mode: remote_group_id

  # Create security group for kafka ingest
  pnda_security_group_kafka_ingest:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Ingest SecurityGroup
      name:
        str_replace:
          template: '%stackname%_security_group_kafka_ingest'
          params:
            '%stackname%': { get_param: 'OS::stack_name' }
      rules:
        - protocol: tcp
          port_range_min: 9090
          port_range_max: 9100
          remote_ip_prefix: { get_param: whitelistSshAccess }

outputs:
  DeploymentID:
    value: { get_param: DeploymentID }
    description: |
      Last DeploymentID used. To trigger a scaling, the stack shall be updated using a different value passed as a parameter.
      Otherwise, orchestration steps necessary to properly the scale the clusters will not be executed.

